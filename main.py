#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Steam maFile scanner ‚Üí bans fetcher ‚Üí JSON + XLSX report
–ó –æ–±–º–µ–∂–µ–Ω–Ω—è–º —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ 10‚Äì15 –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º).

–©–û –†–û–ë–ò–¢–¨ –°–ö–†–ò–ü–¢
1) –ó—á–∏—Ç—É—î –≤—Å—ñ .maFile —É –≤–∫–∞–∑–∞–Ω—ñ–π —Ç–µ—Ü—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ./maFile),
   –¥—ñ—Å—Ç–∞—î SteamID —Ç–∞ –ª–æ–≥—ñ–Ω (–Ω–∞–∑–≤–∞ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è).
2) –ü–∞–∫–µ—Ç–∞–º–∏ –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ Steam Web API GetPlayerBans.
3) –ó–±–µ—Ä—ñ–≥–∞—î:
   - steam_ids64.txt          ‚Äî —Å–ø–∏—Å–æ–∫ SteamID
   - data.json                ‚Äî ¬´—Å–∏—Ä—ñ¬ª –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API (players)
   - data_ban.json            ‚Äî –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∑ –±–∞–Ω–∞–º–∏/—Å–≤—ñ–∂–∏–º–∏ –±–∞–Ω–∞–º–∏
   - report.xlsx              ‚Äî Excel: Login, SteamID, –Ü–≥—Ä–æ–≤—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è, –ö–æ–º'—é–Ω—ñ—Ç—ñ –±–∞–Ω, VAC –±–∞–Ω
4) –ú–∞—î –ø—Ä–æ—Å—Ç–∏–π CLI: --dir, --chunk, --days, --out-xlsx, —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å RPM: --rpm-min/--rpm-max.

–ù–ï–û–ë–•–Ü–î–ù–û:
- Python 3.8+
- pip install requests openpyxl
- –ö–ª—é—á API –≤ –∑–º—ñ–Ω–Ω—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ STEAM_API_KEY –∞–±–æ —É —Ñ–∞–π–ª—ñ .env —Ä—è–¥–∫–æ–º:
    STEAM_API_KEY=–≤–∞—à_–∫–ª—é—á

–ü–†–ò–ö–õ–ê–î –ó–ê–ü–£–°–ö–£:
    python main.py --dir maFile --chunk 50 --days 10 --out-xlsx report.xlsx
    # –∑–º—ñ–Ω–∞ –ª—ñ–º—ñ—Ç—É:
    python main.py --rpm-min 10 --rpm-max 15
"""

from __future__ import annotations

import argparse
import json
import os
import random
import time
from pathlib import Path
from typing import Dict, Iterable, Iterator, List, Tuple

import requests
from openpyxl import Workbook
from openpyxl.utils import get_column_letter


# ------------------------- –û–±–º–µ–∂—É–≤–∞—á –∑–∞–ø–∏—Ç—ñ–≤ ------------------------- #

class MinuteRateLimiter:
    """
    –ü—ñ–¥—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–Ω—é —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø–∏—Ç—ñ–≤ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ [min_rpm, max_rpm] –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É.
    –ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É wait() –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∞ –ø–∞—É–∑–∞ –º—ñ–∂:
        [60/max_rpm, 60/min_rpm] —Å–µ–∫—É–Ω–¥.
    –¢–∞–∫–∏–º —á–∏–Ω–æ–º –∑–∞–ø–∏—Ç–∏ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ ¬´—Ä–æ–∑–º–∞–∑—É—é—Ç—å—Å—è¬ª —É –º–µ–∂–∞—Ö 10‚Äì15/—Ö–≤ (–∑–∞ –∑–∞–º–æ–≤—á.).
    """
    def __init__(self, min_rpm: int = 10, max_rpm: int = 15):
        if min_rpm <= 0 or max_rpm <= 0 or max_rpm < min_rpm:
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è RPM. –û—á—ñ–∫—É—î—Ç—å—Å—è 0 < min_rpm ‚â§ max_rpm.")
        self.min_interval = 60.0 / float(max_rpm)  # –Ω–∞–π–º–µ–Ω—à–∞ –ø–∞—É–∑–∞ (–¥–ª—è –≤–µ—Ä—Ö–Ω—å–æ—ó –º–µ–∂—ñ)
        self.max_interval = 60.0 / float(min_rpm)  # –Ω–∞–π–±—ñ–ª—å—à–∞ –ø–∞—É–∑–∞ (–¥–ª—è –Ω–∏–∂–Ω—å–æ—ó –º–µ–∂—ñ)
        self._next_earliest = 0.0

    def wait(self) -> None:
        now = time.monotonic()
        if now < self._next_earliest:
            time.sleep(self._next_earliest - now)
        interval = random.uniform(self.min_interval, self.max_interval)
        self._next_earliest = time.monotonic() + interval


# ------------------------- –£—Ç–∏–ª—ñ—Ç–∏ ------------------------- #

def load_env_dotenv(dotenv_path: Path = Path(".env")) -> None:
    """–ü—Ä–æ—Å—Ç–∞ (–±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π) –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ .env: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î STEAM_API_KEY —Ç–∞ —ñ–Ω—à—ñ, —è–∫—â–æ –∑–Ω–∞–π–¥–µ."""
    if not dotenv_path.exists():
        return
    for line in dotenv_path.read_text(encoding="utf-8").splitlines():
        line = line.strip()
        if not line or line.startswith("#") or "=" not in line:
            continue
        k, v = line.split("=", 1)
        k = k.strip()
        v = v.strip().strip('"').strip("'")
        if k and v and (k not in os.environ):
            os.environ[k] = v


def chunked(it: Iterable[str], size: int) -> Iterator[List[str]]:
    buf: List[str] = []
    for x in it:
        buf.append(x)
        if len(buf) >= size:
            yield buf
            buf = []
    if buf:
        yield buf


def read_mafiles(ma_dir: Path) -> List[Tuple[str, str]]:
    """
    –ß–∏—Ç–∞—î –≤—Å—ñ *.maFile, –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (login, steamid).
    login ‚Äî —Ü–µ —ñ–º'—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è.
    """
    pairs: List[Tuple[str, str]] = []
    for fp in sorted(ma_dir.glob("*.maFile")):
        try:
            data = json.loads(fp.read_text(encoding="utf-8"))
        except Exception:
            data = json.loads(fp.read_text(encoding="utf-8", errors="ignore"))

        # –ù–∞–π—á–∞—Å—Ç—ñ—à–µ SteamID –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É Session.SteamID
        steamid = None
        if isinstance(data, dict):
            if "Session" in data and isinstance(data["Session"], dict):
                steamid = data["Session"].get("SteamID") or data["Session"].get("steamid")
            steamid = steamid or data.get("SteamID") or data.get("steamid") or data.get("steam_id")

        if not steamid:
            print(f"‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π—à–æ–≤ SteamID —É —Ñ–∞–π–ª—ñ: {fp.name}")
            continue

        steamid_str = str(steamid).strip()
        if not steamid_str.isdigit():
            print(f"‚ö†Ô∏è  –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π SteamID —É {fp.name}: {steamid_str}")
            continue

        login = fp.stem
        pairs.append((login, steamid_str))

    return pairs


def fetch_player_bans(
    api_key: str,
    steam_ids: List[str],
    *,
    rate_limiter: MinuteRateLimiter | None = None,
    timeout: int = 20,
    retries: int = 3,
    backoff_sec: float = 1.5,
) -> List[dict]:
    """
    –í–∏—Ç—è–≥—É—î –±–∞–Ω-–º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è —Å–ø–∏—Å–∫—É SteamID —á–µ—Ä–µ–∑ ISteamUser/GetPlayerBans.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ (players).
    –í–ê–ñ–õ–ò–í–û: –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º HTTP-–∑–∞–ø–∏—Ç–æ–º –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è rate_limiter.wait() (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ).
    """
    url = "https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/"
    params = {"key": api_key, "steamids": ",".join(steam_ids)}

    for attempt in range(1, retries + 1):
        try:
            if rate_limiter:
                rate_limiter.wait()  # –æ–±–º–µ–∂–µ–Ω–Ω—è 10‚Äì15 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤
            resp = requests.get(url, params=params, timeout=timeout)
            if resp.status_code == 429:
                # –õ—ñ–º—ñ—Ç ‚Äî –ø–æ—á–µ–∫–∞—î–º–æ –π –ø–æ–≤—Ç–æ—Ä–∏–º–æ (–Ω–µ –∑–∞–±—É–≤–∞—î–º–æ: –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç —Ç–µ–∂ –ø—Ä–æ–π–¥–µ —á–µ—Ä–µ–∑ wait()).
                wait = backoff_sec * attempt
                print(f"‚è≥ Rate limit (429). –ß–µ–∫–∞—é {wait:.1f}s —ñ –ø–æ–≤—Ç–æ—Ä—é—é...")
                time.sleep(wait)
                continue
            resp.raise_for_status()
            payload = resp.json()
            players = payload.get("players") or payload.get("Players") or []
            if not isinstance(players, list):
                players = []
            return players
        except requests.RequestException as e:
            if attempt >= retries:
                print(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: {e}")
                raise
            wait = backoff_sec * attempt
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait:.1f}s...")
            time.sleep(wait)

    return []


def save_json(obj: object, path: Path) -> None:
    path.write_text(json.dumps(obj, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ JSON: {path}")


def save_text_lines(lines: Iterable[str], path: Path) -> None:
    path.write_text("\n".join(lines) + "\n", encoding="utf-8")
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å–ø–∏—Å–æ–∫: {path}")


def bool_to_uk(v: bool) -> str:
    return "–¢–∞–∫" if bool(v) else "–ù—ñ"


def save_to_xlsx(players: List[dict], steamid_to_login: Dict[str, str], out_path: Path) -> None:
    """
    –°—Ç–≤–æ—Ä—é—î XLSX –∑—ñ —Å—Ç–æ–≤–ø—Ü—è–º–∏:
    Login | SteamID | –Ü–≥—Ä–æ–≤—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è | –ö–æ–º'—é–Ω—ñ—Ç—ñ –±–∞–Ω | VAC –±–∞–Ω
    """
    wb = Workbook()
    ws = wb.active
    ws.title = "Bans"

    headers = ["Login", "SteamID", "–Ü–≥—Ä–æ–≤—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è", "–ö–æ–º'—é–Ω—ñ—Ç—ñ –±–∞–Ω", "VAC –±–∞–Ω"]
    ws.append(headers)

    for p in players:
        sid = str(p.get("SteamId", "") or p.get("steamid", ""))
        login = steamid_to_login.get(sid, "–ù–µ–≤—ñ–¥–æ–º–æ")
        row = [
            login,
            sid,
            int(p.get("NumberOfGameBans", 0) or 0),
            bool_to_uk(p.get("CommunityBanned", False)),
            bool_to_uk(p.get("VACBanned", False)),
        ]
        ws.append(row)

    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
    for col_idx in range(1, len(headers) + 1):
        col = get_column_letter(col_idx)
        max_len = max(
            len(str(ws[f"{col}{r}"].value)) if ws[f"{col}{r}"].value is not None else 0
            for r in range(1, ws.max_row + 1)
        )
    # –¢—Ä—ñ—à–∫–∏ —à–∏—Ä—à–µ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —á–∏—Ç–∞–Ω–Ω—è
        ws.column_dimensions[col].width = min(max(12, max_len + 2), 50)

    wb.save(out_path.as_posix())
    print(f"üìä –ó–±–µ—Ä–µ–∂–µ–Ω–æ Excel: {out_path}")


def make_ban_rows(
    players: List[dict],
    steamid_to_login: Dict[str, str],
    *,
    days_threshold: int | None,
) -> List[dict]:
    """
    –ì–æ—Ç—É—î –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –ø–æ–ª—è–º–∏:
    login, SteamId, profile_url, VACBanned, NumberOfGameBans, CommunityBanned, DaysSinceLastBan
    –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è:
      - —è–∫—â–æ days_threshold –∑–∞–¥–∞–Ω–æ: –±–µ—Ä—É—Ç—å—Å—è —Ç—ñ, —É –∫–æ–≥–æ 0 < DaysSinceLastBan ‚â§ threshold
      - —ñ–Ω–∞–∫—à–µ ‚Äî —É—Å—ñ, –≤ –∫–æ–≥–æ VACBanned –∞–±–æ NumberOfGameBans>0 –∞–±–æ CommunityBanned=True
    """
    out: List[dict] = []
    for p in players:
        sid = str(p.get("SteamId", "") or p.get("steamid", ""))
        dslb = p.get("DaysSinceLastBan")
        vac = bool(p.get("VACBanned", False))
        game_bans = int(p.get("NumberOfGameBans", 0) or 0)
        comm = bool(p.get("CommunityBanned", False))

        take = False
        if days_threshold is not None:
            try:
                d = int(dslb)
                take = (0 < d <= days_threshold)
            except (TypeError, ValueError):
                take = False
        else:
            take = vac or game_bans > 0 or comm

        if take:
            out.append({
                "login": steamid_to_login.get(sid, "–ù–µ–≤—ñ–¥–æ–º–æ"),
                "SteamId": sid,
                "profile_url": f"https://steamcommunity.com/profiles/{sid}" if sid else "",
                "VACBanned": vac,
                "NumberOfGameBans": game_bans,
                "CommunityBanned": comm,
                "DaysSinceLastBan": dslb,
            })
    return out


# ------------------------- –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ------------------------- #

def env_int(name: str, default: int | None) -> int | None:
    v = os.getenv(name)
    if v is None or v == "":
        return default
    try:
        return int(v)
    except ValueError:
        return default


def main() -> None:
    load_env_dotenv()

    parser = argparse.ArgumentParser(description="Scan .maFiles ‚Üí Steam bans ‚Üí JSON/XLSX (–∑ –ª—ñ–º—ñ—Ç–æ–º 10‚Äì15 –∑–∞–ø–∏—Ç—ñ–≤/—Ö–≤)")
    parser.add_argument("--dir", default="maFiles", help="–¢–µ–∫–∞ –∑ *.maFile (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: maFile)")
    parser.add_argument("--chunk", type=int, default=50, help="–†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è API (default: 50)")
    parser.add_argument("--days", type=int, default=None,
                        help="–ü–æ—Ä—ñ–≥ –¥–Ω—ñ–≤ –¥–ª—è —Å–≤—ñ–∂–∏—Ö –±–∞–Ω—ñ–≤ (–Ω–∞–ø—Ä., 10). –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –±–µ—Ä—É—Ç—å—Å—è –≤—Å—ñ –∑ –±–∞–Ω–∞–º–∏.")
    parser.add_argument("--out-steamids", default="steam_ids64.txt", help="–§–∞–π–ª –∑—ñ SteamID (default: steam_ids64.txt)")
    parser.add_argument("--out-json", default="data.json", help="–§–∞–π–ª –∑ –ø–æ–≤–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ API (default: data.json)")
    parser.add_argument("--out-ban", default="data_ban.json",
                        help="–§–∞–π–ª –∑ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–º–∏ –±–∞–Ω–∞–º–∏ (default: data_ban.json)")
    parser.add_argument("--out-xlsx", default="report.xlsx", help="Excel –∑–≤—ñ—Ç (default: report.xlsx)")
    parser.add_argument("--rpm-min", type=int, default=env_int("RPM_MIN", 10),
                        help="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É (default/env RPM_MIN: 10)")
    parser.add_argument("--rpm-max", type=int, default=env_int("RPM_MAX", 15),
                        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É (default/env RPM_MAX: 15)")
    args = parser.parse_args()

    api_key = os.getenv("STEAM_API_KEY", "").strip()
    if not api_key:
        raise SystemExit("‚ùå –ù–µ–º–∞—î –∫–ª—é—á–∞ API. –ó–∞–¥–∞–π—Ç–µ STEAM_API_KEY —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ –∞–±–æ —É .env")

    ma_dir = Path(args.dir)
    if not ma_dir.exists():
        raise SystemExit(f"‚ùå –¢–µ–∫–∞ –Ω–µ —ñ—Å–Ω—É—î: {ma_dir.resolve()}")

    # 1) –∑—á–∏—Ç—É—î–º–æ maFile
    pairs = read_mafiles(ma_dir)
    if not pairs:
        raise SystemExit("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ .maFile")

    # –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—è –∑–∞ SteamID: –ø–µ—Ä—à–∏–π login –ø–µ—Ä–µ–º–∞–≥–∞—î
    steamid_to_login: Dict[str, str] = {}
    for login, sid in pairs:
        if sid not in steamid_to_login:
            steamid_to_login[sid] = login

    steam_ids = list(steamid_to_login.keys())
    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ SteamID: {len(steam_ids)}")

    # 2) –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ SteamID
    save_text_lines(steam_ids, Path(args.out_steamids))

    # 3) —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±–º–µ–∂—É–≤–∞—á
    rate_limiter = MinuteRateLimiter(min_rpm=max(1, args.rpm_min), max_rpm=max(args.rpm_min, args.rpm_max))

    # 4) —Ç—è–≥–Ω–µ–º–æ –±–∞–Ω–∏ –ø–∞–∫–µ—Ç–∞–º–∏, –æ–±–º–µ–∂–µ–Ω–Ω—è ‚Äî –ü–ï–†–ï–î –ö–û–ñ–ù–ò–ú HTTP-–ó–ê–ü–ò–¢–û–ú —É—Å–µ—Ä–µ–¥–∏–Ω—ñ fetch_player_bans
    all_players: List[dict] = []
    for batch in chunked(steam_ids, max(1, int(args.chunk))):
        players = fetch_player_bans(api_key, batch, rate_limiter=rate_limiter)
        all_players.extend(players)
        print(f"‚Ä¶ –æ—Ç—Ä–∏–º–∞–Ω–æ {len(players)} –∑–∞–ø–∏—Å(—ñ–≤) —É –±–∞—Ç—á—ñ, –≤—Å—å–æ–≥–æ: {len(all_players)}")

    # 5) –ø–æ–≤–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    save_json(all_players, Path(args.out_json))

    # 6) —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è data_ban.json
    ban_rows = make_ban_rows(all_players, steamid_to_login, days_threshold=args.days)
    save_json(ban_rows, Path(args.out_ban))
    print(f"üßÆ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å—ñ–≤ —É data_ban.json: {len(ban_rows)}")

    # 7) Excel (–∫–æ–ª–æ–Ω–∫–∏: Login, SteamID, –Ü–≥—Ä–æ–≤—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è, –ö–æ–º'—é–Ω—ñ—Ç—ñ –±–∞–Ω, VAC –±–∞–Ω)
    save_to_xlsx(all_players, steamid_to_login, Path(args.out_xlsx))

    print("üéâ –ì–æ—Ç–æ–≤–æ!")


if __name__ == "__main__":
    main()
